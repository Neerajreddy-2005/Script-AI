{
  "name": "Script-AI Backend",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "api/generate-script",
        "responseMode": "lastNode",
        "options": {
          "responseContentType": "application/json"
        }
      },
      "id": "0930d54f-1160-4d1b-8533-97bed41660d3",
      "name": "Receive /api/generate-script",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        -624,
        -16
      ],
      "webhookId": "eda60d09-5691-48d4-a7b6-23809fed4be4"
    },
    {
      "parameters": {
        "path": "api/health",
        "responseMode": "lastNode",
        "options": {
          "responseContentType": "application/json"
        }
      },
      "id": "fdf4e6af-e827-4391-8d6a-26bc496157ff",
      "name": "Receive /api/health",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        -624,
        288
      ],
      "webhookId": "464ff61e-dc77-4a88-8aa5-1b06ad755b9b"
    },
    {
      "parameters": {
        "functionCode": "// Get data from the webhook body\nconst data = $input.first().json.body;\n\nconst topic = data.topic || '';\nconst platform = data.platform || 'YouTube';\nconst tone = data.tone || 'Casual';\nconst length = data.length || 'Short (2-3 min)';\n\nif (!topic) {\n  return [{ json: { success: false, error: 'Topic is required' } }];\n}\n\nconst prompt = `Create a professional video script for the topic: \"${topic}\"\n\nRequirements:\n- Platform: ${platform}\n- Tone: ${tone}\n- Length: ${length}\n\nPlease generate a complete script with the following structure:\n\n1. INTRODUCTION (Hook the audience)\n2. MAIN CONTENT (Deliver key points in a point wise and well structured manner)\n3. CONCLUSION (Call to action)\n\nFormat the response as JSON with the following structure:\n{\n  \"title\": \"Script title here\",\n  \"introduction\": {\"script\": \"Introduction content here\"},\n  \"mainContent\": {\"script\": \"Main content here\"},\n  \"conclusion\": {\"script\": \"Conclusion content here\"}\n}\n\nMake sure the script is:\n- Optimized for ${platform} platform\n- In a ${tone} tone\n- Approximately ${length} duration\n- Engaging and professional\n- Includes platform-specific elements (e.g., for YouTube: call to subscribe, for TikTok: engaging hooks)\n\nReturn ONLY valid JSON without any markdown formatting or code blocks.`;\n\nreturn [{ json: { prompt, topic, platform, tone, length } }];"
      },
      "id": "14021e80-c399-4c16-a11e-9f2ba85c386f",
      "name": "Create Prompt",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        -320,
        -16
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://openrouter.ai/api/v1/chat/completions",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "openRouterApi",
        "sendHeaders": true,
        "specifyHeaders": "json",
        "jsonHeaders": "{\n  \"Content-Type\": \"application/json\",\n  \"HTTP-Referer\": \"https://script-ai.app\",\n  \"X-Title\": \"Script-AI\"\n}",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ $json.requestBody }}",
        "options": {}
      },
      "id": "439a8a10-b413-42b4-9df4-54f288befe46",
      "name": "Call OpenRouter API",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [
        64,
        -16
      ],
      "credentials": {
        "openRouterApi": {
          "id": "bElgJKkZiZeQM3zo",
          "name": "OpenRouter account"
        }
      }
    },
    {
      "parameters": {
        "functionCode": "// Get the response from the OpenRouter API\nconst apiResponse = $input.first().json;\n\n// Extract the content from the API response\nlet responseText = '';\nif (apiResponse.choices && apiResponse.choices[0] && apiResponse.choices[0].message) {\n  responseText = apiResponse.choices[0].message.content;\n} else {\n  // Fallback if structure is different\n  responseText = apiResponse.content || JSON.stringify(apiResponse);\n}\n\n// Remove markdown code blocks if present\nif (responseText && typeof responseText === 'string') {\n  if (responseText.startsWith('```')) {\n    responseText = responseText.split('```')[1];\n    if (responseText.startsWith('json')) {\n      responseText = responseText.substring(4);\n    }\n    responseText = responseText.trim();\n  }\n}\n\n// Try to parse as JSON\nlet scriptData;\ntry {\n  scriptData = JSON.parse(responseText);\n} catch (error) {\n  // If parsing fails, create a fallback response\n  console.log('Failed to parse JSON, using fallback response');\n  scriptData = {\n    title: \"Generated Script\",\n    introduction: {\n      script: responseText || \"Introduction content here\"\n    },\n    mainContent: {\n      script: \"Main content here\"\n    },\n    conclusion: {\n      script: \"Conclusion content here\"\n    }\n  };\n}\n\n// Return the parsed data\nreturn [{ json: { success: true, data: scriptData } }];"
      },
      "id": "31335096-6f68-4b67-b083-0c72edb6b65f",
      "name": "Parse and Format Response",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        288,
        -16
      ]
    },
    {
      "parameters": {
        "options": {
          "responseCode": 200
        }
      },
      "id": "d34b2cf5-faba-46aa-afdf-97397d4fafbf",
      "name": "Send /api/generate-script Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        576,
        -16
      ]
    },
    {
      "parameters": {
        "options": {
          "responseCode": 200
        }
      },
      "id": "dec1ed97-b499-4797-833f-c5c5026cc9da",
      "name": "Send /api/health Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        -320,
        288
      ]
    },
    {
      "parameters": {
        "jsCode": "// Get the prompt from the previous node\nconst prompt = $('Create Prompt').first().json.prompt;\n\n// Build the complete API request body\nconst requestBody = {\n  model: \"openai/gpt-4o-mini\",\n  messages: [\n    {\n      role: \"user\",\n      content: prompt\n    }\n  ],\n  temperature: 0.7,\n  max_tokens: 2000\n};\n\n// Return the request body\nreturn [{ json: { requestBody } }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -128,
        -16
      ],
      "id": "d7246c6c-d884-40cf-b0eb-2e19defc4d13",
      "name": "Build API Request"
    }
  ],
  "pinData": {},
  "connections": {
    "Receive /api/generate-script": {
      "main": [
        [
          {
            "node": "Create Prompt",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Prompt": {
      "main": [
        [
          {
            "node": "Build API Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Call OpenRouter API": {
      "main": [
        [
          {
            "node": "Parse and Format Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse and Format Response": {
      "main": [
        [
          {
            "node": "Send /api/generate-script Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Receive /api/health": {
      "main": [
        [
          {
            "node": "Send /api/health Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Build API Request": {
      "main": [
        [
          {
            "node": "Call OpenRouter API",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "86250db5-df7d-47d0-ae77-7eaca33b1908",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "102d3e97c2c8b80962d7cbf5cc11bb0ad27126635258dd413efbf996249e0e71"
  },
  "id": "ZGi9R3UbYGQ61zCh",
  "tags": []
}